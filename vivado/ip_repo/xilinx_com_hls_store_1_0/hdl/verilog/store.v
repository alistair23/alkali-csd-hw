// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="store,hls_ip_2020_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=2.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=1241,HLS_SYN_LUT=1259,HLS_VERSION=2020_1_1}" *)

module store (
        ap_clk,
        ap_rst_n,
        m_axi_data_port_AWVALID,
        m_axi_data_port_AWREADY,
        m_axi_data_port_AWADDR,
        m_axi_data_port_AWID,
        m_axi_data_port_AWLEN,
        m_axi_data_port_AWSIZE,
        m_axi_data_port_AWBURST,
        m_axi_data_port_AWLOCK,
        m_axi_data_port_AWCACHE,
        m_axi_data_port_AWPROT,
        m_axi_data_port_AWQOS,
        m_axi_data_port_AWREGION,
        m_axi_data_port_AWUSER,
        m_axi_data_port_WVALID,
        m_axi_data_port_WREADY,
        m_axi_data_port_WDATA,
        m_axi_data_port_WSTRB,
        m_axi_data_port_WLAST,
        m_axi_data_port_WID,
        m_axi_data_port_WUSER,
        m_axi_data_port_ARVALID,
        m_axi_data_port_ARREADY,
        m_axi_data_port_ARADDR,
        m_axi_data_port_ARID,
        m_axi_data_port_ARLEN,
        m_axi_data_port_ARSIZE,
        m_axi_data_port_ARBURST,
        m_axi_data_port_ARLOCK,
        m_axi_data_port_ARCACHE,
        m_axi_data_port_ARPROT,
        m_axi_data_port_ARQOS,
        m_axi_data_port_ARREGION,
        m_axi_data_port_ARUSER,
        m_axi_data_port_RVALID,
        m_axi_data_port_RREADY,
        m_axi_data_port_RDATA,
        m_axi_data_port_RLAST,
        m_axi_data_port_RID,
        m_axi_data_port_RUSER,
        m_axi_data_port_RRESP,
        m_axi_data_port_BVALID,
        m_axi_data_port_BREADY,
        m_axi_data_port_BRESP,
        m_axi_data_port_BID,
        m_axi_data_port_BUSER,
        store_queue_V_V_TDATA,
        store_queue_V_V_TVALID,
        store_queue_V_V_TREADY,
        g2s_dep_queue_V_TDATA,
        g2s_dep_queue_V_TVALID,
        g2s_dep_queue_V_TREADY,
        s2g_dep_queue_V_TDATA,
        s2g_dep_queue_V_TVALID,
        s2g_dep_queue_V_TREADY,
        out_mem_V_Addr_A,
        out_mem_V_EN_A,
        out_mem_V_WEN_A,
        out_mem_V_Din_A,
        out_mem_V_Dout_A,
        out_mem_V_Clk_A,
        out_mem_V_Rst_A,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_pp0_stage0 = 10'd8;
parameter    ap_ST_fsm_state7 = 10'd16;
parameter    ap_ST_fsm_state8 = 10'd32;
parameter    ap_ST_fsm_state9 = 10'd64;
parameter    ap_ST_fsm_state10 = 10'd128;
parameter    ap_ST_fsm_state11 = 10'd256;
parameter    ap_ST_fsm_state12 = 10'd512;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_PORT_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_PORT_DATA_WIDTH = 128;
parameter    C_M_AXI_DATA_PORT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_USER_VALUE = 0;
parameter    C_M_AXI_DATA_PORT_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_PORT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_PORT_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_data_port_AWVALID;
input   m_axi_data_port_AWREADY;
output  [C_M_AXI_DATA_PORT_ADDR_WIDTH - 1:0] m_axi_data_port_AWADDR;
output  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_AWID;
output  [7:0] m_axi_data_port_AWLEN;
output  [2:0] m_axi_data_port_AWSIZE;
output  [1:0] m_axi_data_port_AWBURST;
output  [1:0] m_axi_data_port_AWLOCK;
output  [3:0] m_axi_data_port_AWCACHE;
output  [2:0] m_axi_data_port_AWPROT;
output  [3:0] m_axi_data_port_AWQOS;
output  [3:0] m_axi_data_port_AWREGION;
output  [C_M_AXI_DATA_PORT_AWUSER_WIDTH - 1:0] m_axi_data_port_AWUSER;
output   m_axi_data_port_WVALID;
input   m_axi_data_port_WREADY;
output  [C_M_AXI_DATA_PORT_DATA_WIDTH - 1:0] m_axi_data_port_WDATA;
output  [C_M_AXI_DATA_PORT_WSTRB_WIDTH - 1:0] m_axi_data_port_WSTRB;
output   m_axi_data_port_WLAST;
output  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_WID;
output  [C_M_AXI_DATA_PORT_WUSER_WIDTH - 1:0] m_axi_data_port_WUSER;
output   m_axi_data_port_ARVALID;
input   m_axi_data_port_ARREADY;
output  [C_M_AXI_DATA_PORT_ADDR_WIDTH - 1:0] m_axi_data_port_ARADDR;
output  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_ARID;
output  [7:0] m_axi_data_port_ARLEN;
output  [2:0] m_axi_data_port_ARSIZE;
output  [1:0] m_axi_data_port_ARBURST;
output  [1:0] m_axi_data_port_ARLOCK;
output  [3:0] m_axi_data_port_ARCACHE;
output  [2:0] m_axi_data_port_ARPROT;
output  [3:0] m_axi_data_port_ARQOS;
output  [3:0] m_axi_data_port_ARREGION;
output  [C_M_AXI_DATA_PORT_ARUSER_WIDTH - 1:0] m_axi_data_port_ARUSER;
input   m_axi_data_port_RVALID;
output   m_axi_data_port_RREADY;
input  [C_M_AXI_DATA_PORT_DATA_WIDTH - 1:0] m_axi_data_port_RDATA;
input   m_axi_data_port_RLAST;
input  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_RID;
input  [C_M_AXI_DATA_PORT_RUSER_WIDTH - 1:0] m_axi_data_port_RUSER;
input  [1:0] m_axi_data_port_RRESP;
input   m_axi_data_port_BVALID;
output   m_axi_data_port_BREADY;
input  [1:0] m_axi_data_port_BRESP;
input  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_BID;
input  [C_M_AXI_DATA_PORT_BUSER_WIDTH - 1:0] m_axi_data_port_BUSER;
input  [127:0] store_queue_V_V_TDATA;
input   store_queue_V_V_TVALID;
output   store_queue_V_V_TREADY;
input  [7:0] g2s_dep_queue_V_TDATA;
input   g2s_dep_queue_V_TVALID;
output   g2s_dep_queue_V_TREADY;
output  [7:0] s2g_dep_queue_V_TDATA;
output   s2g_dep_queue_V_TVALID;
input   s2g_dep_queue_V_TREADY;
output  [31:0] out_mem_V_Addr_A;
output   out_mem_V_EN_A;
output  [15:0] out_mem_V_WEN_A;
output  [127:0] out_mem_V_Din_A;
input  [127:0] out_mem_V_Dout_A;
output   out_mem_V_Clk_A;
output   out_mem_V_Rst_A;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

reg store_queue_V_V_TREADY;
reg g2s_dep_queue_V_TREADY;
reg out_mem_V_EN_A;
reg out_mem_V_Rst_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] outputs_V;
reg    data_port_blk_n_AW;
wire    ap_CS_fsm_state3;
reg    data_port_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln552_reg_464;
reg   [0:0] icmp_ln552_reg_464_pp0_iter1_reg;
reg    data_port_blk_n_B;
wire    ap_CS_fsm_state11;
reg    store_queue_V_V_TDATA_blk_n;
reg    g2s_dep_queue_V_TDATA_blk_n;
wire   [0:0] tmp_6_fu_280_p3;
reg    s2g_dep_queue_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln547_fu_316_p2;
wire   [0:0] tmp_7_fu_336_p3;
wire    ap_CS_fsm_state12;
reg   [0:0] tmp_7_reg_449;
reg    data_port_AWVALID;
wire    data_port_AWREADY;
wire   [31:0] data_port_AWADDR;
reg    data_port_WVALID;
wire    data_port_WREADY;
wire    data_port_ARREADY;
wire    data_port_RVALID;
wire   [127:0] data_port_RDATA;
wire    data_port_RLAST;
wire   [0:0] data_port_RID;
wire   [0:0] data_port_RUSER;
wire   [1:0] data_port_RRESP;
wire    data_port_BVALID;
reg    data_port_BREADY;
wire   [1:0] data_port_BRESP;
wire   [0:0] data_port_BID;
wire   [0:0] data_port_BUSER;
reg   [15:0] phi_ln552_reg_225;
wire   [32:0] p_cast_fu_246_p1;
reg   [32:0] p_cast_reg_392;
reg    ap_block_state1;
reg   [127:0] tmp_V_reg_397;
reg   [15:0] tmp_reg_402;
wire   [15:0] tmp_1_fu_260_p4;
reg   [15:0] tmp_1_reg_407;
wire   [31:0] zext_ln304_fu_308_p1;
reg   [31:0] zext_ln304_reg_426;
wire   [31:0] zext_ln552_fu_312_p1;
reg   [31:0] zext_ln552_reg_431;
wire   [15:0] y_fu_321_p2;
reg   [15:0] y_reg_439;
reg    ap_predicate_op53_write_state2;
reg    ap_block_state2_io;
wire   [32:0] add_ln551_fu_331_p2;
reg   [32:0] add_ln551_reg_444;
wire   [12:0] trunc_ln552_fu_353_p1;
reg   [12:0] trunc_ln552_reg_459;
wire   [0:0] icmp_ln552_fu_357_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] add_ln552_fu_362_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [127:0] out_mem_V_load_reg_478;
wire   [15:0] sram_idx_V_1_fu_382_p2;
reg   [15:0] sram_idx_V_1_reg_483;
wire    ap_CS_fsm_state7;
wire   [31:0] add_ln304_fu_387_p2;
reg   [31:0] add_ln304_reg_488;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg   [15:0] sram_idx_V_0_reg_194;
reg   [31:0] dram_idx_V_reg_204;
reg   [15:0] y_0_reg_214;
wire   [63:0] zext_ln552_1_fu_377_p1;
wire   [63:0] zext_ln551_fu_343_p1;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] out_mem_V_Addr_A_orig;
wire   [27:0] tmp_2_fu_236_p4;
wire   [15:0] tmp_3_fu_270_p4;
wire   [32:0] zext_ln215_fu_327_p1;
wire   [12:0] trunc_ln552_1_fu_368_p1;
wire   [12:0] add_ln552_1_fu_372_p2;
wire    regslice_both_s2g_dep_queue_V_U_apdone_blk;
reg    ap_block_state12_io;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_store_queue_V_V_U_apdone_blk;
wire   [127:0] store_queue_V_V_TDATA_int;
wire    store_queue_V_V_TVALID_int;
reg    store_queue_V_V_TREADY_int;
wire    regslice_both_store_queue_V_V_U_ack_in;
wire    regslice_both_g2s_dep_queue_V_U_apdone_blk;
wire   [7:0] g2s_dep_queue_V_TDATA_int;
wire    g2s_dep_queue_V_TVALID_int;
reg    g2s_dep_queue_V_TREADY_int;
wire    regslice_both_g2s_dep_queue_V_U_ack_in;
reg    s2g_dep_queue_V_TVALID_int;
wire    s2g_dep_queue_V_TREADY_int;
wire    regslice_both_s2g_dep_queue_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

store_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
store_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .outputs_V(outputs_V)
);

store_data_port_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 128 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_PORT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_PORT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_PORT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_PORT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_PORT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_PORT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_PORT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_PORT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_PORT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_PORT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_PORT_CACHE_VALUE ))
store_data_port_m_axi_U(
    .AWVALID(m_axi_data_port_AWVALID),
    .AWREADY(m_axi_data_port_AWREADY),
    .AWADDR(m_axi_data_port_AWADDR),
    .AWID(m_axi_data_port_AWID),
    .AWLEN(m_axi_data_port_AWLEN),
    .AWSIZE(m_axi_data_port_AWSIZE),
    .AWBURST(m_axi_data_port_AWBURST),
    .AWLOCK(m_axi_data_port_AWLOCK),
    .AWCACHE(m_axi_data_port_AWCACHE),
    .AWPROT(m_axi_data_port_AWPROT),
    .AWQOS(m_axi_data_port_AWQOS),
    .AWREGION(m_axi_data_port_AWREGION),
    .AWUSER(m_axi_data_port_AWUSER),
    .WVALID(m_axi_data_port_WVALID),
    .WREADY(m_axi_data_port_WREADY),
    .WDATA(m_axi_data_port_WDATA),
    .WSTRB(m_axi_data_port_WSTRB),
    .WLAST(m_axi_data_port_WLAST),
    .WID(m_axi_data_port_WID),
    .WUSER(m_axi_data_port_WUSER),
    .ARVALID(m_axi_data_port_ARVALID),
    .ARREADY(m_axi_data_port_ARREADY),
    .ARADDR(m_axi_data_port_ARADDR),
    .ARID(m_axi_data_port_ARID),
    .ARLEN(m_axi_data_port_ARLEN),
    .ARSIZE(m_axi_data_port_ARSIZE),
    .ARBURST(m_axi_data_port_ARBURST),
    .ARLOCK(m_axi_data_port_ARLOCK),
    .ARCACHE(m_axi_data_port_ARCACHE),
    .ARPROT(m_axi_data_port_ARPROT),
    .ARQOS(m_axi_data_port_ARQOS),
    .ARREGION(m_axi_data_port_ARREGION),
    .ARUSER(m_axi_data_port_ARUSER),
    .RVALID(m_axi_data_port_RVALID),
    .RREADY(m_axi_data_port_RREADY),
    .RDATA(m_axi_data_port_RDATA),
    .RLAST(m_axi_data_port_RLAST),
    .RID(m_axi_data_port_RID),
    .RUSER(m_axi_data_port_RUSER),
    .RRESP(m_axi_data_port_RRESP),
    .BVALID(m_axi_data_port_BVALID),
    .BREADY(m_axi_data_port_BREADY),
    .BRESP(m_axi_data_port_BRESP),
    .BID(m_axi_data_port_BID),
    .BUSER(m_axi_data_port_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(data_port_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(data_port_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(data_port_RDATA),
    .I_RID(data_port_RID),
    .I_RUSER(data_port_RUSER),
    .I_RRESP(data_port_RRESP),
    .I_RLAST(data_port_RLAST),
    .I_AWVALID(data_port_AWVALID),
    .I_AWREADY(data_port_AWREADY),
    .I_AWADDR(data_port_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(zext_ln552_reg_431),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(data_port_WVALID),
    .I_WREADY(data_port_WREADY),
    .I_WDATA(out_mem_V_load_reg_478),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(16'd65535),
    .I_BVALID(data_port_BVALID),
    .I_BREADY(data_port_BREADY),
    .I_BRESP(data_port_BRESP),
    .I_BID(data_port_BID),
    .I_BUSER(data_port_BUSER)
);

regslice_both #(
    .DataWidth( 128 ))
regslice_both_store_queue_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(store_queue_V_V_TDATA),
    .vld_in(store_queue_V_V_TVALID),
    .ack_in(regslice_both_store_queue_V_V_U_ack_in),
    .data_out(store_queue_V_V_TDATA_int),
    .vld_out(store_queue_V_V_TVALID_int),
    .ack_out(store_queue_V_V_TREADY_int),
    .apdone_blk(regslice_both_store_queue_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_g2s_dep_queue_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(g2s_dep_queue_V_TDATA),
    .vld_in(g2s_dep_queue_V_TVALID),
    .ack_in(regslice_both_g2s_dep_queue_V_U_ack_in),
    .data_out(g2s_dep_queue_V_TDATA_int),
    .vld_out(g2s_dep_queue_V_TVALID_int),
    .ack_out(g2s_dep_queue_V_TREADY_int),
    .apdone_blk(regslice_both_g2s_dep_queue_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_s2g_dep_queue_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(8'd1),
    .vld_in(s2g_dep_queue_V_TVALID_int),
    .ack_in(s2g_dep_queue_V_TREADY_int),
    .data_out(s2g_dep_queue_V_TDATA),
    .vld_out(regslice_both_s2g_dep_queue_V_U_vld_out),
    .ack_out(s2g_dep_queue_V_TREADY),
    .apdone_blk(regslice_both_s2g_dep_queue_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((data_port_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((data_port_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((data_port_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        dram_idx_V_reg_204 <= add_ln304_reg_488;
    end else if ((~((store_queue_V_V_TVALID_int == 1'b0) | (ap_start == 1'b0) | ((g2s_dep_queue_V_TVALID_int == 1'b0) & (tmp_6_fu_280_p3 == 1'd1))) & (1'b1 == ap_CS_fsm_state1))) begin
        dram_idx_V_reg_204 <= {{store_queue_V_V_TDATA_int[57:26]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln552_fu_357_p2 == 1'd0))) begin
        phi_ln552_reg_225 <= add_ln552_fu_362_p2;
    end else if (((data_port_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln552_reg_225 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((data_port_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        sram_idx_V_0_reg_194 <= sram_idx_V_1_reg_483;
    end else if ((~((store_queue_V_V_TVALID_int == 1'b0) | (ap_start == 1'b0) | ((g2s_dep_queue_V_TVALID_int == 1'b0) & (tmp_6_fu_280_p3 == 1'd1))) & (1'b1 == ap_CS_fsm_state1))) begin
        sram_idx_V_0_reg_194 <= {{store_queue_V_V_TDATA_int[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((data_port_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        y_0_reg_214 <= y_reg_439;
    end else if ((~((store_queue_V_V_TVALID_int == 1'b0) | (ap_start == 1'b0) | ((g2s_dep_queue_V_TVALID_int == 1'b0) & (tmp_6_fu_280_p3 == 1'd1))) & (1'b1 == ap_CS_fsm_state1))) begin
        y_0_reg_214 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln304_reg_488 <= add_ln304_fu_387_p2;
        sram_idx_V_1_reg_483 <= sram_idx_V_1_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln547_fu_316_p2 == 1'd0))) begin
        add_ln551_reg_444 <= add_ln551_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln552_reg_464 <= icmp_ln552_fu_357_p2;
        icmp_ln552_reg_464_pp0_iter1_reg <= icmp_ln552_reg_464;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln552_reg_464 == 1'd0))) begin
        out_mem_V_load_reg_478 <= out_mem_V_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((~((store_queue_V_V_TVALID_int == 1'b0) | (ap_start == 1'b0) | ((g2s_dep_queue_V_TVALID_int == 1'b0) & (tmp_6_fu_280_p3 == 1'd1))) & (1'b1 == ap_CS_fsm_state1))) begin
        p_cast_reg_392[27 : 0] <= p_cast_fu_246_p1[27 : 0];
        tmp_1_reg_407 <= {{store_queue_V_V_TDATA_int[95:80]}};
        tmp_V_reg_397 <= store_queue_V_V_TDATA_int;
        tmp_reg_402 <= {{store_queue_V_V_TDATA_int[79:64]}};
        zext_ln304_reg_426[15 : 0] <= zext_ln304_fu_308_p1[15 : 0];
        zext_ln552_reg_431[15 : 0] <= zext_ln552_fu_312_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln547_fu_316_p2 == 1'd1))) begin
        tmp_7_reg_449 <= tmp_V_reg_397[32'd5];
    end
end

always @ (posedge ap_clk) begin
    if (((data_port_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        trunc_ln552_reg_459 <= trunc_ln552_fu_353_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        y_reg_439 <= y_fu_321_p2;
    end
end

always @ (*) begin
    if ((icmp_ln552_fu_357_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state12_io) | (regslice_both_s2g_dep_queue_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state12_io) | (regslice_both_s2g_dep_queue_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((data_port_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_port_AWVALID = 1'b1;
    end else begin
        data_port_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((data_port_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        data_port_BREADY = 1'b1;
    end else begin
        data_port_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln552_reg_464_pp0_iter1_reg == 1'd0))) begin
        data_port_WVALID = 1'b1;
    end else begin
        data_port_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_port_blk_n_AW = m_axi_data_port_AWREADY;
    end else begin
        data_port_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        data_port_blk_n_B = m_axi_data_port_BVALID;
    end else begin
        data_port_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln552_reg_464_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_port_blk_n_W = m_axi_data_port_WREADY;
    end else begin
        data_port_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (tmp_6_fu_280_p3 == 1'd1))) begin
        g2s_dep_queue_V_TDATA_blk_n = g2s_dep_queue_V_TVALID_int;
    end else begin
        g2s_dep_queue_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((g2s_dep_queue_V_TVALID == 1'b1) & (regslice_both_g2s_dep_queue_V_U_ack_in == 1'b1))) begin
        g2s_dep_queue_V_TREADY = 1'b1;
    end else begin
        g2s_dep_queue_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((store_queue_V_V_TVALID_int == 1'b0) | (ap_start == 1'b0) | ((g2s_dep_queue_V_TVALID_int == 1'b0) & (tmp_6_fu_280_p3 == 1'd1))) & (1'b1 == ap_CS_fsm_state1) & (tmp_6_fu_280_p3 == 1'd1))) begin
        g2s_dep_queue_V_TREADY_int = 1'b1;
    end else begin
        g2s_dep_queue_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_mem_V_EN_A = 1'b1;
    end else begin
        out_mem_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (tmp_7_reg_449 == 1'd1)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_7_fu_336_p3 == 1'd1) & (icmp_ln547_fu_316_p2 == 1'd1)))) begin
        s2g_dep_queue_V_TDATA_blk_n = s2g_dep_queue_V_TREADY_int;
    end else begin
        s2g_dep_queue_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (ap_predicate_op53_write_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        s2g_dep_queue_V_TVALID_int = 1'b1;
    end else begin
        s2g_dep_queue_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        store_queue_V_V_TDATA_blk_n = store_queue_V_V_TVALID_int;
    end else begin
        store_queue_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((store_queue_V_V_TVALID == 1'b1) & (regslice_both_store_queue_V_V_U_ack_in == 1'b1))) begin
        store_queue_V_V_TREADY = 1'b1;
    end else begin
        store_queue_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((store_queue_V_V_TVALID_int == 1'b0) | (ap_start == 1'b0) | ((g2s_dep_queue_V_TVALID_int == 1'b0) & (tmp_6_fu_280_p3 == 1'd1))) & (1'b1 == ap_CS_fsm_state1))) begin
        store_queue_V_V_TREADY_int = 1'b1;
    end else begin
        store_queue_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((store_queue_V_V_TVALID_int == 1'b0) | (ap_start == 1'b0) | ((g2s_dep_queue_V_TVALID_int == 1'b0) & (tmp_6_fu_280_p3 == 1'd1))) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln547_fu_316_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln547_fu_316_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((data_port_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln552_fu_357_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln552_fu_357_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((data_port_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if ((~((1'b1 == ap_block_state12_io) | (regslice_both_s2g_dep_queue_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln304_fu_387_p2 = (dram_idx_V_reg_204 + zext_ln304_reg_426);

assign add_ln551_fu_331_p2 = (p_cast_reg_392 + zext_ln215_fu_327_p1);

assign add_ln552_1_fu_372_p2 = (trunc_ln552_1_fu_368_p1 + trunc_ln552_reg_459);

assign add_ln552_fu_362_p2 = (phi_ln552_reg_225 + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((store_queue_V_V_TVALID_int == 1'b0) | (ap_start == 1'b0) | ((g2s_dep_queue_V_TVALID_int == 1'b0) & (tmp_6_fu_280_p3 == 1'd1)));
end

always @ (*) begin
    ap_block_state12_io = ((s2g_dep_queue_V_TREADY_int == 1'b0) & (tmp_7_reg_449 == 1'd1));
end

always @ (*) begin
    ap_block_state2_io = ((s2g_dep_queue_V_TREADY_int == 1'b0) & (ap_predicate_op53_write_state2 == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((data_port_WREADY == 1'b0) & (icmp_ln552_reg_464_pp0_iter1_reg == 1'd0));
end

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op53_write_state2 = ((tmp_7_fu_336_p3 == 1'd1) & (icmp_ln547_fu_316_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_port_AWADDR = zext_ln551_fu_343_p1;

assign icmp_ln547_fu_316_p2 = ((y_0_reg_214 == tmp_reg_402) ? 1'b1 : 1'b0);

assign icmp_ln552_fu_357_p2 = ((phi_ln552_reg_225 == tmp_1_reg_407) ? 1'b1 : 1'b0);

assign out_mem_V_Addr_A = out_mem_V_Addr_A_orig << 32'd4;

assign out_mem_V_Addr_A_orig = zext_ln552_1_fu_377_p1;

assign out_mem_V_Clk_A = ap_clk;

assign out_mem_V_Din_A = 128'd0;

always @ (*) begin
    out_mem_V_Rst_A = ~ap_rst_n;
end

assign out_mem_V_WEN_A = 16'd0;

assign p_cast_fu_246_p1 = tmp_2_fu_236_p4;

assign s2g_dep_queue_V_TVALID = regslice_both_s2g_dep_queue_V_U_vld_out;

assign sram_idx_V_1_fu_382_p2 = (tmp_1_reg_407 + sram_idx_V_0_reg_194);

assign tmp_1_fu_260_p4 = {{store_queue_V_V_TDATA_int[95:80]}};

assign tmp_2_fu_236_p4 = {{outputs_V[31:4]}};

assign tmp_3_fu_270_p4 = {{store_queue_V_V_TDATA_int[111:96]}};

assign tmp_6_fu_280_p3 = store_queue_V_V_TDATA_int[32'd3];

assign tmp_7_fu_336_p3 = tmp_V_reg_397[32'd5];

assign trunc_ln552_1_fu_368_p1 = phi_ln552_reg_225[12:0];

assign trunc_ln552_fu_353_p1 = sram_idx_V_0_reg_194[12:0];

assign y_fu_321_p2 = (y_0_reg_214 + 16'd1);

assign zext_ln215_fu_327_p1 = dram_idx_V_reg_204;

assign zext_ln304_fu_308_p1 = tmp_3_fu_270_p4;

assign zext_ln551_fu_343_p1 = add_ln551_reg_444;

assign zext_ln552_1_fu_377_p1 = add_ln552_1_fu_372_p2;

assign zext_ln552_fu_312_p1 = tmp_1_fu_260_p4;

always @ (posedge ap_clk) begin
    p_cast_reg_392[32:28] <= 5'b00000;
    zext_ln304_reg_426[31:16] <= 16'b0000000000000000;
    zext_ln552_reg_431[31:16] <= 16'b0000000000000000;
end

endmodule //store
